export const PREFERRED_TRIM_SIZE: 400;
export function clearUpdatesRange(db: import('./mongo-adapter.js').MongoAdapter, docName: string, from: number, to: number): Promise<import('mongodb').BulkWriteResult>;
export function createDocumentStateVectorKey(docName: string): {
    docName: string;
    version: "v1_sv";
};
export function createDocumentMetaKey(docName: string, metaKey: string): {
    docName: string;
    version: "v1";
    metaKey: string;
};
export function flushDB(db: import('./mongo-adapter.js').MongoAdapter): Promise<void>;
export function getMongoUpdates(db: import('./mongo-adapter.js').MongoAdapter, docName: string): Promise<Uint8Array[]>;
export function getCurrentUpdateClock(db: import('./mongo-adapter.js').MongoAdapter, docName: string): Promise<number>;
export function storeUpdate(db: import('./mongo-adapter.js').MongoAdapter, docName: string, update: Uint8Array): Promise<number>;
export function mergeUpdates(updates: Array<Uint8Array>): {
    update: Uint8Array;
    sv: Uint8Array;
};
export function decodeMongodbStateVector(buf: import("mongodb").Binary): {
    sv: Uint8Array;
    clock: number;
};
export function readStateVector(db: import('./mongo-adapter.js').MongoAdapter, docName: string): Promise<{
    sv: Uint8Array;
    clock: number;
} | {
    sv: null;
    clock: number;
}>;
export function getAllSVDocs(db: import('./mongo-adapter.js').MongoAdapter): Promise<import("mongodb").WithId<import("bson").Document>[]>;
export function flushDocument(db: import('./mongo-adapter.js').MongoAdapter, docName: string, stateAsUpdate: Uint8Array, stateVector: Uint8Array): Promise<number>;
//# sourceMappingURL=utils.d.ts.map